using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//All code here is generated by ChatGPT. I just think it's neat!

public class TouchElevator : MonoBehaviour
{
    public float distance = 5f; // distance to move vertically
    public float delay = 2f; // delay before moving back to original position
    public GameObject elevator; // reference to the elevator object
    private Vector3 originalPosition; // initial position of the elevator
    private Vector3 targetPosition; // target position of the elevator
    private bool moving = false; // flag to indicate whether the elevator is currently moving
    private float timer = 0f; // timer to keep track of delay

    private void Start()
    {
        originalPosition = elevator.transform.position;
        targetPosition = originalPosition + Vector3.up * distance;
    }

    private void OnTriggerEnter(Collider other)
    {
        CharacterController player = other.gameObject.GetComponent<CharacterController>();
        if (!moving && player != null)
        {
            moving = true;
            timer = 0f; // reset the timer when the elevator starts moving
        }
    }

    private void OnTriggerStay(Collider other)
    {
        CharacterController player = other.gameObject.GetComponent<CharacterController>();
        if (moving && player != null)
        {
            // check if the player is still in contact with the trigger when the elevator reaches its target position
            if (elevator.transform.position == targetPosition)
            {
                moving = false;
            }
        }
    }

    private void OnTriggerExit(Collider other)
    {
        CharacterController player = other.gameObject.GetComponent<CharacterController>();
        if (moving && player != null)
        {
            moving = false;
            // start the delay timer when the player leaves the trigger box
            timer = 0f;
        }
    }

    private void FixedUpdate()
    {
        if (moving)
        {
            // move the elevator towards the target position
            elevator.transform.position = Vector3.MoveTowards(elevator.transform.position, targetPosition, Time.fixedDeltaTime);
        }
        else
        {
            // start the delay timer
            timer += Time.fixedDeltaTime;
            if (timer >= delay)
            {
                // move the elevator back to the original position after the delay has elapsed
                elevator.transform.position = Vector3.MoveTowards(elevator.transform.position, originalPosition, Time.fixedDeltaTime);
            }
        }
    }
}